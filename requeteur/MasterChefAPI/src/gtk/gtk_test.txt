
void on_send_button_clicked(GtkButton *button, gpointer user_data) {
    GtkBuilder *builder = (GtkBuilder *)user_data;
    // Récupération des champs de texte
    const gchar *nom = gtk_entry_get_text(GTK_ENTRY(gtk_builder_get_object(builder, "nom_entry")));
    const gchar *prenom = gtk_entry_get_text(GTK_ENTRY(gtk_builder_get_object(builder, "prenom_entry")));
    const gchar *email = gtk_entry_get_text(GTK_ENTRY(gtk_builder_get_object(builder, "email_entry")));
    const gchar *message = gtk_entry_get_text(GTK_ENTRY(gtk_builder_get_object(builder, "message_entry")));

    // Envoi du message (à compléter)
}

void on_about_button_clicked(GtkButton *button, gpointer user_data) {
    GtkWidget *window = (GtkWidget *)user_data;
    gtk_widget_hide(window); // On cache la page courante
    // On affiche la page "about us"
    GtkWidget *window_about_us = GTK_WIDGET(gtk_builder_get_object(builder_about_us, "main_window"));
    gtk_widget_show(window_about_us);
}

void on_back_button_clicked(GtkButton *button, gpointer user_data) {
    GtkWidget *window = (GtkWidget *)user_data;
    gtk_widget_hide(window); // On cache la page courante
    // On affiche la page précédente
    GtkWidget *window_previous = GTK_WIDGET(gtk_builder_get_object(builder_requeteur, "main_window"));
    gtk_widget_show(window_previous);
}

int gtk(int argc, char *argv[]) {
    GtkBuilder *builder_home, *builder_about_us;
    GtkWidget *window_home, *window_about_us;
    GError *error = NULL;

    gtk_init(&argc, &argv);

    // Chargement de la page "home"
    builder_home = gtk_builder_new();
    if (gtk_builder_add_from_file(builder_home, "./home.glade", &error) == 0) {
        g_printerr("Error loading file: %s\n", error->message);
        g_clear_error(&error);
        return 1;
    }
    window_home = GTK_WIDGET(gtk_builder_get_object(builder_home, "main_window"));
    gtk_builder_connect_signals(builder_home, NULL);

    // Chargement de la page "about us"
    builder_about_us = gtk_builder_new();
    if (gtk_builder_add_from_file(builder_about_us, "./about_us.glade", &error) == 0) {
        g_printerr("Error loading file: %s\n", error->message);
        g_clear_error(&error);
        return 1;
    }
    window_about_us = GTK_WIDGET(gtk_builder_get_object(builder_about_us, "main_window"));
    gtk_builder_connect_signals(builder_about_us, NULL);

    // Affichage de la page "home"
    gtk_widget_show(window_home);

    // Connexion des signaux
    g_signal_connect(G_OBJECT(window_home), "destroy", G_CALLBACK(gtk_main_quit), NULL);
    g_signal_connect(G_OBJECT(window_about_us), "destroy", G_CALLBACK(gtk_main_quit), NULL);

    g_signal_connect(GTK_BUTTON(gtk_builder_get_object(builder_home, "send_button")), "clicked", G_CALLBACK(on_send_button_clicked), builder_home);
    g_signal_connect(GTK_BUTTON(gtk_builder_get_object(builder_home, "about_button")), "clicked", G_CALLBACK(on_about_button_clicked), window_about_us);

    g_signal_connect(GTK_BUTTON(gtk_builder_get_object(builder_about_us, "back_button")), "clicked", G_CALLBACK(on_back_button_clicked), window_home);

    gtk_main();

    return 0;
}


static void on_send_button_clicked(GtkButton *button, gpointer user_data)
{
    GtkWidget *url_entry = GTK_WIDGET(gtk_builder_get_object(GTK_BUILDER(user_data), "url_entry"));
    GtkWidget *apikey_entry = GTK_WIDGET(gtk_builder_get_object(GTK_BUILDER(user_data), "apikey_entry"));
    GtkComboBoxText *method_entry = GTK_COMBO_BOX_TEXT(gtk_builder_get_object(GTK_BUILDER(user_data), "method_dropdown"));
    const gchar *url = gtk_entry_get_text(GTK_ENTRY(url_entry));
    const gchar *apikey = gtk_entry_get_text(GTK_ENTRY(apikey_entry));
    const gchar *method = gtk_combo_box_text_get_active_text(method_entry);
    if (url) {
        char *result = curl(url, apikey, method);
        GtkWidget *result_textview = GTK_WIDGET(gtk_builder_get_object(GTK_BUILDER(user_data), "result_textview"));
        GtkTextBuffer *text_buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(result_textview));
        gtk_text_buffer_set_text(text_buffer, (gchar*)result, strlen(result));
    }
}

int gtk(int argc, char *argv[])
{
    GtkBuilder *builder;
    GtkWidget *window;
    GError *error = NULL;

    gtk_init(&argc, &argv);

    builder = gtk_builder_new();
    if (gtk_builder_add_from_file(builder, "/home/najma/Documents/esgi/cookmaster/PA-Cook-Master/requeteur/MasterChefAPI/src/gtk/connect_bdd.glade", &error) == 0) {
        g_printerr("Error loading file: %s\n", error->message);
        g_clear_error(&error);
        return 1;
    }

    window = GTK_WIDGET(gtk_builder_get_object(builder, "main_window"));
    gtk_builder_connect_signals(builder, NULL);

    gtk_widget_show(window);

    g_signal_connect(G_OBJECT(window), "destroy", G_CALLBACK(gtk_main_quit), NULL);

    g_signal_connect(GTK_BUTTON(gtk_builder_get_object(builder, "send_button")), "clicked", G_CALLBACK(on_send_button_clicked), builder);

    gtk_main();

    return 0;
}
